ls
exit
quit
ls
exit
quit
bye
dt_training <- read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv”, ))
;
X <- read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv”))
mydat <- fread('https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv')
pml.training.csv <- read.csv("~/Desktop/machine-learning/pml-training.csv.webarchive")
pml.training.csv <- read.csv("~/Desktop/machine-learning/pml-training.csv.webarchive", header=FALSE, comment.char="#")
pml.training.csv
dim (pml.training.csv)
pml.testing.csv <- read.csv("~/Desktop/machine-learning/pml-testing.csv.webarchive", header=FALSE, comment.char="#")
pml.testing.csv <- read.csv("~/Desktop/machine-learning/pml-testing.csv.webarchive", header=FALSE, row.names=NULL, comment.char="#")
library(caret)
pml.testing <- read.csv("~/Desktop/machine-learning/pml-testing.csv", header=FALSE)
view(pml.testing)
view("pml.testing")
pml.testing
pml.testing <- read.csv("~/Desktop/machine-learning/pml-testing.csv", header=FALSE)
testing <- read.csv("~/Desktop/machine-learning/pml-testing.csv", header=FALSE)
testing
training <- read.csv("~/Desktop/machine-learning/pml-training.csv", header=FALSE)
training
training <- read.csv("~/Desktop/machine-learning/pml-training.csv", header=FALSE, na.strings=c("NA","#DIV/0!",""))
training
testing <- read.csv("~/Desktop/machine-learning/pml-testing.csv", header=FALSE, na.strings=c("NA","#DIV/0!",""))
colname(testing)
colnames(testing)
testing <- read.csv("~/Desktop/machine-learning/pml-testing.csv", header=FALSE, na.strings=c("NA","#DIV/0!",""))
training <- read.csv("~/Desktop/machine-learning/pml-training.csv", header=FALSE, na.strings=c("NA","#DIV/0!",""))
inTrain <- createDataPartition(y=training$classe, p=0.6, list=FALSE)
library(caret)
library(rattle)
library(gridExtra)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
setwd("~/Desktop/machine-learning")
training<-read.table("~/Desktop/machine-learning/pml-training.csv", header=TRUE, sep=",")
testing<-read.table("~/Desktop/machine-learning/pml-testing.csv",header=TRUE, sep=",")
trainingaccel<-grepl("^accel",names(training))
trainingtotal<-grepl("^total",names(training))
roll<-grepl("^roll",names(training))
pitch<-grepl("^pitch",names(training))
yaw<-grepl("^yaw",names(training))
magnet<-grepl("^magnet",names(training))
gyro<-grepl("^gyro",names(training))
acceldata<-training[ ,trainingaccel]
rolldata<-training[ ,roll]
pitchdata<-training[ ,pitch]
yawdata<-training[,yaw]
magnetdata<-training[,magnet]
gyrodata<-training[,gyro]
totaldata<-training[,trainingtotal]
trainClasse<-cbind(acceldata,rolldata,pitchdata,yawdata,magnetdata,gyrodata,totaldata,training[ ,160])
colnames(trainClasse)[53]<-'Classe'
testingaccel<-grepl("^accel",names(testing))
testingtotal<-grepl("^total",names(testing))
troll<-grepl("^roll",names(testing))
tpitch<-grepl("^pitch",names(testing))
tyaw<-grepl("^yaw",names(testing))
tmagnet<-grepl("^magnet",names(testing))
tgyro<-grepl("^gyro",names(testing))
tacceldata<-testing[ ,testingaccel]
trolldata<-testing[ ,troll]
tpitchdata<-testing[,tpitch]
tyawdata<-testing[,tyaw]
tmagnetdata<-testing[,tmagnet]
tgyrodata<-testing[,tgyro]
ttotaldata<-testing[,testingtotal]
testClasse<-cbind(tacceldata,trolldata,tpitchdata,tyawdata,tmagnetdata,tgyrodata,ttotaldata,testing[ ,160])
colnames(testClasse)[53]<-'problem.id'
inTrain <- createDataPartition(y=training$classe, p=0.6, list=FALSE)
myTraining <- training[inTrain, ]; myTesting <- training[-inTrain, ]
dim(myTraining); dim(myTesting)
myDataNZV <- nearZeroVar(myTraining, saveMetrics=TRUE)
myNZVvars <- names(myTraining) %in% c("new_window", "kurtosis_roll_belt", "kurtosis_picth_belt",#
"kurtosis_yaw_belt", "skewness_roll_belt", "skewness_roll_belt.1", "skewness_yaw_belt",#
"max_yaw_belt", "min_yaw_belt", "amplitude_yaw_belt", "avg_roll_arm", "stddev_roll_arm",#
"var_roll_arm", "avg_pitch_arm", "stddev_pitch_arm", "var_pitch_arm", "avg_yaw_arm",#
"stddev_yaw_arm", "var_yaw_arm", "kurtosis_roll_arm", "kurtosis_picth_arm",#
"kurtosis_yaw_arm", "skewness_roll_arm", "skewness_pitch_arm", "skewness_yaw_arm",#
"max_roll_arm", "min_roll_arm", "min_pitch_arm", "amplitude_roll_arm", "amplitude_pitch_arm",#
"kurtosis_roll_dumbbell", "kurtosis_picth_dumbbell", "kurtosis_yaw_dumbbell", "skewness_roll_dumbbell",#
"skewness_pitch_dumbbell", "skewness_yaw_dumbbell", "max_yaw_dumbbell", "min_yaw_dumbbell",#
"amplitude_yaw_dumbbell", "kurtosis_roll_forearm", "kurtosis_picth_forearm", "kurtosis_yaw_forearm",#
"skewness_roll_forearm", "skewness_pitch_forearm", "skewness_yaw_forearm", "max_roll_forearm",#
"max_yaw_forearm", "min_roll_forearm", "min_yaw_forearm", "amplitude_roll_forearm",#
"amplitude_yaw_forearm", "avg_roll_forearm", "stddev_roll_forearm", "var_roll_forearm",#
"avg_pitch_forearm", "stddev_pitch_forearm", "var_pitch_forearm", "avg_yaw_forearm",#
"stddev_yaw_forearm", "var_yaw_forearm")#
myTraining <- myTraining[!myNZVvars]
dim(myTraining)
myTraining <- myTraining[c(-1)]
trainingV3 <- myTraining #creating another subset to iterate in loop#
for(i in 1:length(myTraining)) { #for every column in the training dataset#
        if( sum( is.na( myTraining[, i] ) ) /nrow(myTraining) >= .6 ) { #if n?? NAs > 60% of total observations#
        for(j in 1:length(trainingV3)) {#
            if( length( grep(names(myTraining[i]), names(trainingV3)[j]) ) ==1)  { #if the columns are the same:#
                trainingV3 <- trainingV3[ , -j] #Remove that column#
            }   #
        } #
    }#
}
dim(trainingV3)
clean1 <- colnames(myTraining)
clean2 <- colnames(myTraining[, -58]) #already with classe column removed
myTesting <- myTesting[clean1]
testing <- testing[clean2]
dim(myTesting)
dim(testing)
for (i in 1:length(testing) ) {#
        for(j in 1:length(myTraining)) {#
        if( length( grep(names(myTraining[i]), names(testing)[j]) ) ==1)  {#
            class(testing[j]) <- class(myTraining[i])#
        }      #
    }      #
}
testing <- rbind(myTraining[2, -58] , testing) #note row 2 does not mean anything, this will be removed right.. now:
testing <- testing[-1,]
modFitA1 <- rpart(classe ~ ., data=myTraining, method="class")
fancyRpartPlot(modFitA1)
predictionsA1 <- predict(modFitA1, myTesting, type = "class")
confusionMatrix(predictionsA1, myTesting$classe)
modFitB1 <- randomForest(classe ~. , data=myTraining)
predictionsB1 <- predict(modFitB1, myTesting, type = "class")
confusionMatrix(predictionsB1, myTesting$classe)
