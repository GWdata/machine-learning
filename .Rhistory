field <- within(field, EVTYPE <- factor(x = EVTYPE, levels = field$EVTYPE))
return(field)
}
fatalities <- sortHelper("FATALITIES", dataset = storm)
injuries <- sortHelper("INJURIES", dataset = storm)
dim(stormData)
head(stormData, n = 2)
if (dim(stormData)[2] == 37) {
stormData$year <- as.numeric(format(as.Date(stormData$BGN_DATE, format = "%m/%d/%Y %H:%M:%S"), "%Y"))
}
hist(stormData$year, breaks = 30)
storm <- stormData[stormData$year >= 1995, ]
dim(storm)
sortHelper <- function(fieldName, top = 15, dataset = stormData) {
index <- which(colnames(dataset) == fieldName)
field <- aggregate(dataset[, index], by = list(dataset$EVTYPE), FUN = "sum")
names(field) <- c("EVTYPE", fieldName)
field <- arrange(field, field[, 2], decreasing = T)
field <- head(field, n = top)
field <- within(field, EVTYPE <- factor(x = EVTYPE, levels = field$EVTYPE))
return(field)
}
fatalities <- sortHelper("FATALITIES", dataset = storm)
injuries <- sortHelper("INJURIES", dataset = storm)
View(sortHelper)
View(sortHelper)
View(sortHelper)
View(sortHelper)
View(sortHelper)
View(sortHelper)
fatalities
View(sortHelper)
View(s)
pwd
pwd()
x2 <- c(7921,5184,8836,4761)
mean(x2)
max(x2) - min(x2)
(mean(x2) - x2) / (max(x2 - min(x2))
(mean(x2) - x2) / max(x2 - min(x2))
(mean(x2) - x2) / (max(x2 - min(x2))
(mean(x2) - x2) / (max(x2) - min(x2))
x2 <- c(7921,5184,8836,4761)
mean(x2)
max(x2) - min(x2)
(mean(x2) - x2) / (max(x2) - min(x2))
x2 <- (7921,5184,8836,4761)
x2 <- c(7921,5184,8836,4761)
mean(x2)
x1 <- c(89,72,94,69)
mean(x1)
max(x1) - min(x1)
(mean(x1) - x1) / (max(x1) - min(x1))
x2 <- c(7921,5184,8836,4761)
mean(x2)
max(x2) - min(x2)
(mean(x2) - x2 / max(x2) - min(x2))
x2 <- c(7921,5184,8836,4761)
mean(x2)
(mean(x2) - x2 / (max(x2) - min(x2))
x2 <- c(7921,5184,8836,4761)
x2 <- c(7921,5184,8836,4761)
mean(x2)
max(x2) - min(x2)
(mean(x2) - x2 / (max(x2) - min(x2))
(mean(x2) - x2 / (max(x2) - min(x2)
(mean(x2) - x2 / (max(x2) - min(x2))
(mean(x2) - x2 / (max(x2) - min(x2))
max(x2) - min(x2)
clear()
stormData <- read.csv("~/Desktop/Coursera/Reproducible Research/Project2/repdata-data-StormData.csv", sep = ","
`
)
;

exit
quit()
stormData <- read.csv("~/Desktop/Coursera/Reproducible Research/Project2/repdata-data-StormData.csv", sep = ",")
s <- read.csv("~/Desktop/Coursera/Reproducible Research/Project2/repdata-data-StormData.csv", header = TRUE)
dim(s)
head(s, n = 2)
stormData <- read.csv("~/Desktop/Coursera/Reproducible Research/Project2/repdata-data-StormData.csv", header = TRUE)
stormData <- read.csv("~/Desktop/Coursera/Reproducible Research/Project2/repdata-data-StormData.csv", sep = ",")
dim(stormData)
head(stormData, n = 2)
head(stormData, n = 2)
if (dim(stormData)[2] == 37) {
stormData$year <- as.numeric(format(as.Date(stormData$BGN_DATE, format = "%m/%d/%Y %H:%M:%S"), "%Y"))
}
hist(stormData$year, breaks = 30)
storm <- stormData[stormData$year >= 1995, ]
dim(storm)
sortHelper <- function(fieldName, top = 15, dataset = stormData) {
index <- which(colnames(dataset) == fieldName)
field <- aggregate(dataset[, index], by = list(dataset$EVTYPE), FUN = "sum")
names(field) <- c("EVTYPE", fieldName)
field <- arrange(field, field[, 2], decreasing = T)
field <- head(field, n = top)
field <- within(field, EVTYPE <- factor(x = EVTYPE, levels = field$EVTYPE))
return(field)
}
fatalities <- sortHelper("FATALITIES", dataset = storm)
injuries <- sortHelper("INJURIES", dataset = storm)
convertHelper <- function(dataset = storm, fieldName, newFieldName) {
totalLen <- dim(dataset)[2]
index <- which(colnames(dataset) == fieldName)
dataset[, index] <- as.character(dataset[, index])
logic <- !is.na(toupper(dataset[, index]))
dataset[logic & toupper(dataset[, index]) == "B", index] <- "9"
dataset[logic & toupper(dataset[, index]) == "M", index] <- "6"
dataset[logic & toupper(dataset[, index]) == "K", index] <- "3"
dataset[logic & toupper(dataset[, index]) == "H", index] <- "2"
dataset[logic & toupper(dataset[, index]) == "", index] <- "0"
dataset[, index] <- as.numeric(dataset[, index])
dataset[is.na(dataset[, index]), index] <- 0
dataset <- cbind(dataset, dataset[, index - 1] * 10^dataset[, index])
names(dataset)[totalLen + 1] <- newFieldName
return(dataset)
}
storm <- convertHelper(storm, "PROPDMGEXP", "propertyDamage")
storm <- convertHelper(storm, "CROPDMGEXP", "cropDamage")
names(storm)
options(scipen=999)
property <- sortHelper("propertyDamage", dataset = storm)
crop <- sortHelper("cropDamage", dataset = storm)
fatalities
install.packages("ply")
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("sortHelper")
options(scipen=999)
property <- sortHelper("propertyDamage", dataset = storm)
crop <- sortHelper("cropDamage", dataset = storm)
fatalities
property <- sortHelper("propertyDamage", dataset = storm)
options(scipen=999)
property <- sortHelper("propertyDamage", dataset = storm)
crop <- sortHelper("cropDamage", dataset = storm)
fatalities
property
crop
propertyPlot <- qplot(EVTYPE, data = property, weight = propertyDamage, geom = "bar", binwidth = 1) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + scale_y_continuous("Property Damage in US dollars")+
xlab("Severe Weather Type") + ggtitle("Total Property Damage by\n Severe Weather Events in\n the U.S. from 1995 - 2011")
cropPlot<- qplot(EVTYPE, data = crop, weight = cropDamage, geom = "bar", binwidth = 1) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + scale_y_continuous("Crop Damage in US dollars") +
xlab("Severe Weather Type") + ggtitle("Total Crop Damage by \nSevere Weather Events in\n the U.S. from 1995 - 2011")
grid.arrange(propertyPlot, cropPlot, ncol = 2)
install.packages("qplop")
install.packages("ggplot2")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
propertyPlot <- qplot(EVTYPE, data = property, weight = propertyDamage, geom = "bar", binwidth = 1) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + scale_y_continuous("Property Damage in US dollars")+
xlab("Severe Weather Type") + ggtitle("Total Property Damage by\n Severe Weather Events in\n the U.S. from 1995 - 2011")
cropPlot<- qplot(EVTYPE, data = crop, weight = cropDamage, geom = "bar", binwidth = 1) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + scale_y_continuous("Crop Damage in US dollars") +
xlab("Severe Weather Type") + ggtitle("Total Crop Damage by \nSevere Weather Events in\n the U.S. from 1995 - 2011")
grid.arrange(propertyPlot, cropPlot, ncol = 2)
propertyPlot <- qplot(EVTYPE, data = property, weight = propertyDamage, geom = "bar", binwidth = 1) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + scale_y_continuous("Property Damage in US dollars")+
xlab("Severe Weather Type") + ggtitle("Total Property Damage by\n Severe Weather Events in\n the U.S. from 1995 - 2011")
cropPlot<- qplot(EVTYPE, data = crop, weight = cropDamage, geom = "bar", binwidth = 1) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + scale_y_continuous("Crop Damage in US dollars") +
xlab("Severe Weather Type") + ggtitle("Total Crop Damage by \nSevere Weather Events in\n the U.S. from 1995 - 2011")
grid.arrange(propertyPlot, cropPlot, ncol = 2)
propertyPlot <- qplot(EVTYPE, data = property, weight = propertyDamage, geom = "histogram", binwidth = 1) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + scale_y_continuous("Property Damage in US dollars")+
xlab("Severe Weather Type") + ggtitle("Total Property Damage by\n Severe Weather Events in\n the U.S. from 1995 - 2011")
cropPlot<- qplot(EVTYPE, data = crop, weight = cropDamage, geom = "bar", binwidth = 1) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + scale_y_continuous("Crop Damage in US dollars") +
xlab("Severe Weather Type") + ggtitle("Total Crop Damage by \nSevere Weather Events in\n the U.S. from 1995 - 2011")
grid.arrange(propertyPlot, cropPlot, ncol = 2)
propertyPlot <- qplot(EVTYPE, data = property, weight = propertyDamage, geom = "histogram", binwidth = 1) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + scale_y_continuous("Property Damage in US dollars")+
xlab("Severe Weather Type") + ggtitle("Total Property Damage by\n Severe Weather Events in\n the U.S. from 1995 - 2011")
cropPlot<- qplot(EVTYPE, data = crop, weight = cropDamage, geom = "histogram", binwidth = 1) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + scale_y_continuous("Crop Damage in US dollars") +
xlab("Severe Weather Type") + ggtitle("Total Crop Damage by \nSevere Weather Events in\n the U.S. from 1995 - 2011")
grid.arrange(propertyPlot, cropPlot, ncol = 2)
install.packages("gridExtra")
install.packages("cowplot")
propertyPlot <- qplot(EVTYPE, data = property, weight = propertyDamage, geom = "histogram", binwidth = 1) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + scale_y_continuous("Property Damage in US dollars")+
xlab("Severe Weather Type") + ggtitle("Total Property Damage by\n Severe Weather Events in\n the U.S. from 1995 - 2011")
cropPlot<- qplot(EVTYPE, data = crop, weight = cropDamage, geom = "histogram", binwidth = 1) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + scale_y_continuous("Crop Damage in US dollars") +
xlab("Severe Weather Type") + ggtitle("Total Crop Damage by \nSevere Weather Events in\n the U.S. from 1995 - 2011")
grid.arrange(propertyPlot, cropPlot, ncol = 2)
propertyPlot <- qplot(EVTYPE, data = property, weight = propertyDamage, geom = "histogram", binwidth = 1) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + scale_y_continuous("Property Damage in US dollars")+
xlab("Severe Weather Type") + ggtitle("Total Property Damage by\n Severe Weather Events in\n the U.S. from 1995 - 2011")
propertyPlot <- qplot(EVTYPE, data = property, weight = propertyDamage, geom = "histogram", binwidth = 1) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + scale_y_continuous("Property Damage in US dollars")+
xlab("Severe Weather Type") + ggtitle("Total Property Damage by\n Severe Weather Events in\n the U.S. from 1995 - 2011")
propertyPlot <- qplot(EVTYPE, data = property, weight = propertyDamage, geom = "bar", binwidth = 1) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + scale_y_continuous("Property Damage in US dollars")+
xlab("Severe Weather Type") + ggtitle("Total Property Damage by\n Severe Weather Events in\n the U.S. from 1995 - 2011")
cropPlot<- qplot(EVTYPE, data = crop, weight = cropDamage, geom = "bar", binwidth = 1) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + scale_y_continuous("Crop Damage in US dollars") +
xlab("Severe Weather Type") + ggtitle("Total Crop Damage by \nSevere Weather Events in\n the U.S. from 1995 - 2011")
grid.arrange(propertyPlot, cropPlot, ncol = 2)
property
data <- read.csv("~/Desktop/Coursera/Reproducible Research/Project2/repdata-data-StormData.csv", header = TRUE)
data$EVTYPE = toupper(data$EVTYPE)
dim(data)
head(data)
data[data$EVTYPE == "TSTM WIND", ]$EVTYPE = "THUNDERSTORM WIND"
data[data$EVTYPE == "THUNDERSTORM WINDS", ]$EVTYPE = "THUNDERSTORM WIND"
data[data$EVTYPE == "RIVER FLOOD", ]$EVTYPE = "FLOOD"
data[data$EVTYPE == "HURRICANE/TYPHOON", ]$EVTYPE = "HURRICANE-TYPHOON"
data[data$EVTYPE == "HURRICANE", ]$EVTYPE = "HURRICANE-TYPHOON"
fatal <- aggregate(FATALITIES ~ EVTYPE, data = data, sum)
fatal1 <- fatal[fatal$FATALITIES > 0, ]
fatalorder <- fatal1[order(fatal1$FATALITIES, decreasing = TRUE), ]
head(fatalorder)
injury <- aggregate(INJURIES ~ EVTYPE, data = data, sum)
injury1 <- injury[injury$INJURIES > 0, ]
injuryorder <- injury1[order(injury1$INJURIES, decreasing = TRUE), ]
head(injuryorder)
par(mfrow = c(2, 1))
barplot(fatalorder[1:10, 2], col = rainbow(10), legend.text = fatalorder[1:10,
1], ylab = "Fatality", main = "10 natural events cause most fatality")
barplot(injuryorder[1:10, 2], col = rainbow(10), legend.text = injuryorder[1:10,
1], ylab = "Injuried people", main = "10 natural events cause most people injuries")
intersect(fatalorder[1:10, 1], injuryorder[1:10, 1])
unique(data$PROPDMGEXP)
unique(data$CROPDMGEXP)
data[data$PROPDMGEXP == "K", ]$PROPDMG <- data[data$PROPDMGEXP == "K", ]$PROPDMG *
1000
data[data$PROPDMGEXP == "M", ]$PROPDMG <- data[data$PROPDMGEXP == "M", ]$PROPDMG *
1e+06
data[data$PROPDMGEXP == "m", ]$PROPDMG <- data[data$PROPDMGEXP == "m", ]$PROPDMG *
1e+06
data[data$PROPDMGEXP == "B", ]$PROPDMG <- data[data$PROPDMGEXP == "B", ]$PROPDMG *
1e+09
data[data$CROPDMGEXP == "K", ]$CROPDMG <- data[data$CROPDMGEXP == "K", ]$CROPDMG *
1000
data[data$CROPDMGEXP == "k", ]$CROPDMG <- data[data$CROPDMGEXP == "k", ]$CROPDMG *
1000
data[data$CROPDMGEXP == "M", ]$CROPDMG <- data[data$CROPDMGEXP == "M", ]$CROPDMG *
1e+06
data[data$CROPDMGEXP == "m", ]$CROPDMG <- data[data$CROPDMGEXP == "m", ]$CROPDMG *
1e+06
data[data$CROPDMGEXP == "B", ]$CROPDMG <- data[data$CROPDMGEXP == "B", ]$CROPDMG *
1e+09
damage <- aggregate(PROPDMG ~ EVTYPE, data = data, sum)
damage1 <- damage[damage$PROPDMG > 0, ]
damageorder <- damage1[order(damage1$PROPDMG, decreasing = TRUE), ]
head(damageorder)
cropdmg <- aggregate(CROPDMG ~ EVTYPE, data = data, sum)
cropdmg1 <- cropdmg[cropdmg$CROPDMG > 0, ]
cropdmgorder <- cropdmg1[order(cropdmg1$CROPDMG, decreasing = TRUE), ]
head(cropdmgorder)
par(mfrow = c(2, 1))
barplot(damageorder[1:10, 2], col = rainbow(10), legend.text = damageorder[1:10,
1], ylab = "Property damage", main = "10 natural events caused most property damage")
barplot(cropdmgorder[1:10, 2], col = rainbow(10), legend.text = cropdmgorder[1:10,
1], ylab = "Crop damage", main = "10 natural events caused most crop damage")
totaldmg <- merge(damageorder, cropdmgorder, by = "EVTYPE")
totaldmg$total = totaldmg$PROPDMG + totaldmg$CROPDMG
totaldmgorder <- totaldmg[order(totaldmg$total, decreasing = TRUE), ]
totaldmgorder[1:5, ]
original_data <- read.csv("~/Desktop/Coursera/Reproducible Research/Project2/repdata-data-StormData.csv", header = TRUE)
dim (original_data)
head (original_data)
data <- original_data[,c("STATE", "EVTYPE", "FATALITIES", "INJURIES", "PROPDMG", "PROPDMGEXP","CROPDMG", "CROPDMGEXP")]
sum (is.na (data))
head (data)
summary (data)
fatal <- aggregate (FATALITIES~EVTYPE, data, sum)
fatal <- fatal [order(fatal$FATALITIES, decreasing=TRUE),]
par(mar=c(12, 6, 1, 1))
barplot (height = fatal$FATALITIES[1:30], names.arg = fatal$EVTYPE[1:30], las = 2, cex.names= 0.8,
col = rainbow (30, start=0, end=0.5))
title (main = "Fatalities: Top 30 Events", line=-5)
title (ylab = "Totla number of Fatalities", line=4)
injur <- aggregate (INJURIES~EVTYPE, data, sum)
injur <- injur [order(injur$INJURIES, decreasing=TRUE),]
par(mar=c(12, 6, 1, 1))
barplot (height = injur$INJURIES[1:30], names.arg = injur$EVTYPE[1:30], las = 2, cex.names = 0.8,
col = rainbow (30, start=0, end=0.5))
title (main = "Injuries: Top 30 Events", line=-5)
title (ylab = "Total number of Injuries", line=4)
symbol <- c("", "+", "-", "?", 0:9, "h", "H", "k", "K", "m", "M", "b", "B");
factor <- c(rep(0,4), 0:9, 2, 2, 3, 3, 6, 6, 9, 9)
multiplier <- data.frame (symbol, factor)
data$damage.prop <- data$PROPDMG*10^multiplier[match(data$PROPDMGEXP,multiplier$symbol),2]
data$damage.crop <- data$CROPDMG*10^multiplier[match(data$CROPDMGEXP,multiplier$symbol),2]
data$damage <- data$damage.prop + data$damage.crop
damage <- aggregate (damage~EVTYPE, data, sum);
damage$bilion <- damage$damage / 1e9;
damage <- damage [order(damage$bilion, decreasing=TRUE),]
par(mar=c(12, 6, 1, 1))
barplot (height = damage$bilion[1:30], names.arg = damage$EVTYPE[1:30], las = 2, cex.names = 0.8,
col = rainbow (30, start=0, end=0.5))
title ("Damage: Top 30 Events", line=-5)
title (ylab = "Total damage (bilion USD)")
x1 <- c(89,72,94,69)
mean(x1)
max(x1) - min(x1)
(mean(x1) -x1 / (max(x1) - min(x1))
(mean(x1) - x1 / (max(x1) - min(x1))
What is the normalized feature x(3)1? (Hint: midterm = 89, final = 96 is training example 1.) Please round off your answer to two decimal places and enter in the text box below.
x1 <- c(89,72,94,69)
mean(x1)
max(x1) - min(x1)
(mean(x1) - x1) / (max(x1) - min(x1))
install.packages("swirl")
packageVersion("swirl")
library("swirl")
install_from_swirl("Statistical Inference")
swirl()
2+1/36
(2+1)/36
1 - 0.083333333
deck
52
1/52
4/52
5/52
4/52
info()
skip()
12/52
11/51
skip()
exit
quit()
install.packages("ggplot2")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
testing = adData[-inTrain,]
install.packages(c("cluster", "cowplot", "crayon", "DBI", "evaluate", "formatR", "highr", "htmltools", "httr", "jsonlite", "knitr", "Matrix", "mgcv", "mime", "nlme", "openssl", "packrat", "plyr", "R.utils", "Rcpp", "rmarkdown", "rsconnect", "rstudioapi", "stringi", "survival", "swirl"))
install.packages(c("cluster", "cowplot", "crayon", "DBI", "evaluate",
pwd
getwd
testing = mixtures[-inTrain,]
install.packages("caret")
exit
quit
save()
source('~/.active-rstudio-document')
install.packages("AppliedPredictiveModeling")
exit
quit
logoff
pml.testing.csv <- read.table("~/Desktop/machine-learning/pml-testing.csv.webarchive", sep=";", quote="\"")
View(pml.testing.csv)
pml.testing.csv <- read.csv2("~/Desktop/machine-learning/pml-testing.csv.webarchive", header=FALSE, comment.char="#")
View(pml.testing.csv)
pml.testing.csv <- read.csv("~/Desktop/machine-learning/pml-testing.csv.webarchive", header=FALSE, row.names=1, comment.char="#")
View(pml.testing.csv)
pml.testing.csv <- read.csv("~/Desktop/machine-learning/pml-testing.csv.webarchive", header=FALSE, comment.char="#")
View(pml.testing.csv)
`pml-training` <- read.csv("/var/folders/h_/7n894_v92szbfhz1b6fjfy6m0000gn/T//RtmpggF9Kc/data4ec61e08b5d", header=FALSE)
View(`pml-training`)
View(pml.testing.csv)
cls
clearPushBack()
X <- read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"))
X
X <- read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv”, ))
X <- read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv”))
pml.testing.csv <- read.csv("~/Desktop/machine-learning/pml-testing.csv.webarchive", header=FALSE, comment.char="#")
View(pml.testing.csv)
View(pml.testing.csv)
View(pml.testing.csv)
pml.testing.csv <- read.csv("~/Desktop/machine-learning/pml-testing.csv.webarchive", header=FALSE, row.names=NULL, comment.char="#")
View(pml.testing.csv)
load("~/Desktop/machine-learning/pml-training.csv.webarchive")
load("~/Desktop/machine-learning/pml-testing.csv")
clearPushBack()
install.packages("rattle")
install.packages("rpart.plot")
install.packages("randomForest")
url_raw_training <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
url_raw_training
file_dest_training <- "pml-training.csv"
url_raw_testing <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
file_dest_testing <- "pml-testing.csv"
df_testing <- read.csv(file_dest_testing, na.strings=c("NA",""), header=TRUE)
df_training <- read.csv(file_dest_training, na.strings=c("NA",""), header=TRUE)
url_raw_training <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
url_raw_training
file_dest_training <- "pml-training.csv"
df_training <- read.csv(file_dest_training, na.strings=c("NA",""), header=TRUE)
setwd
train_in <- read.csv("~/Desktop/machine-learning/pml-training.csv.webarchive", header=T)
train_in <- read.csv('~/Desktop/machine-learning/pml-training.csv.webarchive', header=T)
load("~/Desktop/machine-learning/pml-testing.csv")
load("~/Desktop/machine-learning/pml-training.csv.webarchive")
load("~/Desktop/machine-learning/pml-testing.csv")
pml.testing <- read.csv("~/Desktop/machine-learning/pml-testing.csv", header=FALSE)
View(pml.testing)
testing <- read.csv("~/Desktop/machine-learning/pml-testing.csv", header=FALSE, na.strings=c("NA","#DIV/0!",""))
training <- read.csv("~/Desktop/machine-learning/pml-training.csv", header=FALSE, na.strings=c("NA","#DIV/0!",""))
getwd()
inTrain <- createDataPartition(y=training$classe, p=0.6, list=FALSE)
install.packages(c("car", "caret", "cluster", "CORElearn", "cowplot", "crayon", "curl", "DBI", "digest", "evaluate", "formatR", "highr", "htmltools", "httr", "jsonlite", "knitr", "Matrix", "mgcv", "mime", "nlme", "openssl", "packrat", "plyr", "R.utils", "Rcpp", "rmarkdown", "rsconnect", "rstudioapi", "stringi", "survival", "swirl"))
install.packages(c("car", "caret", "cluster", "CORElearn", "cowplot",
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(caret)
library(rattle)
library("gridExtra", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
setwd("~/Desktop/machine-learning")
training<-read.table(“./machine-learning/pml-training.csv", header=TRUE, sep=",")
training<-read.table("./machine-learning/pml-training.csv", header=TRUE, sep=",")
training <-read.table("~/Desktop/machine-learning/pml-training.csv", header=TRUE, sep=",")
testing <-read.table("~/Desktop/machine-learning/pml-training.csv",header=TRUE, sep=",")
trainingaccel<-grepl("^accel",names(training))
trainingtotal<-grepl("^total",names(training))
roll<-grepl("^roll",names(training))
pitch<-grepl("^pitch",names(training))
yaw<-grepl("^yaw",names(training))
magnet<-grepl("^magnet",names(training))
gyro<-grepl("^gyro",names(training))
acceldata<-training[ ,trainingaccel]
rolldata<-training[ ,roll]
pitchdata<-training[ ,pitch]
yawdata<-training[,yaw]
magnetdata<-training[,magnet]
gyrodata<-training[,gyro]
totaldata<-training[,trainingtotal]
trainClasse<-cbind(acceldata,rolldata,pitchdata,yawdata,magnetdata,gyrodata,totaldata,training[ ,160])
testingaccel<-grepl("^accel",names(testing))
testingtotal<-grepl("^total",names(testing))
troll<-grepl("^roll",names(testing))
tpitch<-grepl("^pitch",names(testing))
tyaw<-grepl("^yaw",names(testing))
tmagnet<-grepl("^magnet",names(testing))
tgyro<-grepl("^gyro",names(testing))
tacceldata<-testing[ ,testingaccel]
trolldata<-testing[ ,troll]
tpitchdata<-testing[,tpitch]
tyawdata<-testing[,tyaw]
tmagnetdata<-testing[,tmagnet]
tgyrodata<-testing[,tgyro]
ttotaldata<-testing[,testingtotal]
testClasse<-cbind(tacceldata,trolldata,tpitchdata,tyawdata,tmagnetdata,tgyrodata,ttotaldata,testing[ ,160])
colnames(testClasse)[53]<-'problem.id'
set.seed(400)
inTrain = createDataPartition(trainClasse$Classe, p = .60)[[1]]
library("rpart", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("rpart.plot", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
inTrain = createDataPartition(trainClasse$Classe, p = .60)[[1]]
getwd()
library(randomForest)
inTrain = createDataPartition(trainClasse$Classe, p = .60)[[1]]
detach("package:caret", unload=TRUE)
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
inTrain = createDataPartition(trainClasse$Classe, p = .60)[[1]]
inTrain = createDataPartition(trainClasse$Classe, p = .70)[[1]]
colname
testClasse
colnames(testClasse)
inTrain = createDataPartition(trainClasse$Classe, p = .70)[[1]]
inTrain <- createDataPartition(y=training$classe, p=0.6, list=FALSE)
trainingsubset = trainClasse[ inTrain,]
testingsubset = trainClasse[-inTrain,]
set.seed(400)
modFit<-train(Classe~.,method="rpart", data=trainingsubset)
myTraining <- training[inTrain, ]; myTesting <- training[-inTrain, ]
dim(myTraining); dim(myTesting)
myDataNZV <- nearZeroVar(myTraining, saveMetrics=TRUE)
myNZVvars <- names(myTraining) %in% c("new_window", "kurtosis_roll_belt", "kurtosis_picth_belt",
"kurtosis_yaw_belt", "skewness_roll_belt", "skewness_roll_belt.1", "skewness_yaw_belt",
"max_yaw_belt", "min_yaw_belt", "amplitude_yaw_belt", "avg_roll_arm", "stddev_roll_arm",
"var_roll_arm", "avg_pitch_arm", "stddev_pitch_arm", "var_pitch_arm", "avg_yaw_arm",
"stddev_yaw_arm", "var_yaw_arm", "kurtosis_roll_arm", "kurtosis_picth_arm",
"kurtosis_yaw_arm", "skewness_roll_arm", "skewness_pitch_arm", "skewness_yaw_arm",
"max_roll_arm", "min_roll_arm", "min_pitch_arm", "amplitude_roll_arm", "amplitude_pitch_arm",
"kurtosis_roll_dumbbell", "kurtosis_picth_dumbbell", "kurtosis_yaw_dumbbell", "skewness_roll_dumbbell",
"skewness_pitch_dumbbell", "skewness_yaw_dumbbell", "max_yaw_dumbbell", "min_yaw_dumbbell",
"amplitude_yaw_dumbbell", "kurtosis_roll_forearm", "kurtosis_picth_forearm", "kurtosis_yaw_forearm",
"skewness_roll_forearm", "skewness_pitch_forearm", "skewness_yaw_forearm", "max_roll_forearm",
"max_yaw_forearm", "min_roll_forearm", "min_yaw_forearm", "amplitude_roll_forearm",
"amplitude_yaw_forearm", "avg_roll_forearm", "stddev_roll_forearm", "var_roll_forearm",
"avg_pitch_forearm", "stddev_pitch_forearm", "var_pitch_forearm", "avg_yaw_forearm",
"stddev_yaw_forearm", "var_yaw_forearm")
myTraining <- myTraining[!myNZVvars]
dim(myTraining)
myTraining <- myTraining[c(-1)]
trainingV3 <- myTraining #creating another subset to iterate in loop
for(i in 1:length(myTraining)) { #for every column in the training dataset
if( sum( is.na( myTraining[, i] ) ) /nrow(myTraining) >= .6 ) { #if n?? NAs > 60% of total observations
for(j in 1:length(trainingV3)) {
if( length( grep(names(myTraining[i]), names(trainingV3)[j]) ) ==1)  { #if the columns are the same:
trainingV3 <- trainingV3[ , -j] #Remove that column
}
}
}
}
dim(trainingV3)
myTraining <- trainingV3
rm(trainingV3)
clean1 <- colnames(myTraining)
clean2 <- colnames(myTraining[, -58]) #already with classe column removed
myTesting <- myTesting[clean1]
testing <- testing[clean2]
dim(myTesting)
dim(testing)
for (i in 1:length(testing) ) {
for(j in 1:length(myTraining)) {
if( length( grep(names(myTraining[i]), names(testing)[j]) ) ==1)  {
class(testing[j]) <- class(myTraining[i])
}
}
}
testing <- rbind(myTraining[2, -58] , testing)
testing <- testing[-1,]
modFitA1 <- rpart(classe ~ ., data=myTraining, method="class")
fancyRpartPlot(modFitA1)
predictionsA1 <- predict(modFitA1, myTesting, type = "class")
confusionMatrix(predictionsA1, myTesting$classe)
